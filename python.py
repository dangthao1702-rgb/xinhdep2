import streamlit as st
import pandas as pd
import numpy as np
import json
from google import genai
from google.genai.errors import APIError
import io

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n Kinh doanh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n ƒê·∫ßu t∆∞ üìä")

# L·∫•y API Key t·ª´ Streamlit Secrets
API_KEY = st.secrets.get("GEMINI_API_KEY")

# --- 1. H√ÄM TR√çCH XU·∫§T D·ªÆ LI·ªÜU B·∫∞NG GEMINI (S·ª≠ d·ª•ng Structured Output) ---
def extract_financial_data(doc_content, api_key):
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh v√†o c·∫•u tr√∫c JSON."""
    if not api_key:
        return None, "L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'. Vui l√≤ng c·∫•u h√¨nh Streamlit Secrets."

    try:
        client = genai.Client(api_key=api_key)
        
        # 1. ƒê·ªãnh nghƒ©a JSON Schema (C·∫•u tr√∫c d·ªØ li·ªáu ƒë·∫ßu ra)
        response_schema = {
            "type": "OBJECT",
            "properties": {
                "initial_investment": {"type": "NUMBER", "description": "V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (30,000,000,000 VND)"},
                "project_life": {"type": "INTEGER", "description": "V√≤ng ƒë·ªùi d·ª± √°n (v√≠ d·ª•: 10 nƒÉm)"},
                "annual_revenue": {"type": "NUMBER", "description": "Doanh thu h√†ng nƒÉm (v√≠ d·ª•: 3,500,000,000 VND)"},
                "annual_cost": {"type": "NUMBER", "description": "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (v√≠ d·ª•: 2,000,000,000 VND)"},
                "wacc": {"type": "NUMBER", "description": "WACC/L√£i su·∫•t chi·∫øt kh·∫•u (d·∫°ng th·∫≠p ph√¢n, v√≠ d·ª•: 0.13 cho 13%)"},
                "tax_rate": {"type": "NUMBER", "description": "Thu·∫ø su·∫•t TNDN (d·∫°ng th·∫≠p ph√¢n, v√≠ d·ª•: 0.2 cho 20%)"}
            },
            "required": ["initial_investment", "project_life", "annual_revenue", "annual_cost", "wacc", "tax_rate"]
        }

        # 2. X√¢y d·ª±ng Prompt v√† System Instruction
        system_instruction = (
            "B·∫°n l√† tr·ª£ l√Ω tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc n·ªôi dung vƒÉn b·∫£n "
            "ph∆∞∆°ng √°n kinh doanh v√† tr√≠ch xu·∫•t 6 th√¥ng s·ªë ch√≠nh x√°c theo c·∫•u tr√∫c JSON ƒë∆∞·ª£c cung c·∫•p. "
            "ƒê·∫£m b·∫£o WACC v√† Thu·∫ø su·∫•t ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi sang d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 13% -> 0.13). "
            "B·ªè qua c√°c th√¥ng tin kh√°c nh∆∞ T√†i s·∫£n ƒë·∫£m b·∫£o."
        )

        prompt = f"Tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh sau t·ª´ vƒÉn b·∫£n d∆∞·ªõi ƒë√¢y:\n\n---\n{doc_content}\n---"

        # 3. G·ªçi API v·ªõi Structured Output
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt,
            system_instruction=system_instruction,
            config={"response_mime_type": "application/json", "response_schema": response_schema}
        )
        
        # 4. Ph√¢n t√≠ch k·∫øt qu·∫£ JSON
        json_data = json.loads(response.text)
        
        # Chu·∫©n h√≥a WACC v√† Thu·∫ø su·∫•t (n·∫øu ng∆∞·ªùi d√πng nh·∫≠p s·ªë l·ªõn h∆°n 1)
        if json_data['wacc'] > 1:
            json_data['wacc'] /= 100
        if json_data['tax_rate'] > 1:
            json_data['tax_rate'] /= 100

        return json_data, None

    except APIError as e:
        return None, f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API. Chi ti·∫øt l·ªói: {e}"
    except json.JSONDecodeError:
        return None, "L·ªói ph√¢n t√≠ch JSON: AI kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON. Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi dung file."
    except Exception as e:
        return None, f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}"

# --- 2 & 3. H√ÄM T√çNH TO√ÅN D√íNG TI·ªÄN V√Ä CH·ªà S·ªê ---
@st.cache_data
def calculate_metrics(params):
    """X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn v√† t√≠nh to√°n NPV, IRR, PP, DPP."""
    I0 = params['initial_investment']
    N = params['project_life']
    R = params['annual_revenue']
    C = params['annual_cost']
    t = params['tax_rate']
    r = params['wacc']
    
    # 1. T√≠nh D√≤ng ti·ªÅn H√†ng nƒÉm (Gi·∫£ ƒë·ªãnh Kh·∫•u hao = 0)
    EBIT = R - C
    EAT = EBIT * (1 - t) # L·ª£i nhu·∫≠n sau thu·∫ø
    FCF = EAT # D√≤ng ti·ªÅn thu·∫ßn h√†ng nƒÉm (Free Cash Flow)

    # 2. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn
    years = list(range(0, N + 1))
    cash_flows = [0] * (N + 1)
    cash_flows[0] = -I0 # V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu
    for i in range(1, N + 1):
        cash_flows[i] = FCF

    df_cf = pd.DataFrame({
        'NƒÉm': years,
        'Doanh thu (R)': [0] + [R] * N,
        'Chi ph√≠ (C)': [0] + [C] * N,
        'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBIT)': [0] + [EBIT] * N,
        'Thu·∫ø (20%)': [0] + [EBIT * t] * N,
        'L·ª£i nhu·∫≠n sau thu·∫ø (EAT/FCF)': [0] + [FCF] * N,
        'D√≤ng ti·ªÅn thu·∫ßn (CF)': cash_flows,
    })
    
    # ƒê·ªãnh d·∫°ng c√°c c·ªôt ti·ªÅn t·ªá
    currency_cols = ['Doanh thu (R)', 'Chi ph√≠ (C)', 'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBIT)', 'Thu·∫ø (20%)', 'L·ª£i nhu·∫≠n sau thu·∫ø (EAT/FCF)', 'D√≤ng ti·ªÅn thu·∫ßn (CF)']
    for col in currency_cols:
         df_cf[col] = df_cf[col].apply(lambda x: f"{x:,.0f} VND" if x != 0 else 0)

    # 3. T√≠nh to√°n Ch·ªâ s·ªë T√†i ch√≠nh
    
    # A. NPV
    npv_value = np.npv(r, cash_flows)
    
    # B. IRR (numpy.irr y√™u c·∫ßu k·∫øt qu·∫£ tr·∫£ v·ªÅ l√† s·ªë)
    # C·∫ßn d√πng cash_flows g·ªëc (kh√¥ng ph·∫£i cash_flows ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng chu·ªói)
    try:
        irr_value = np.irr([cash_flows[0]] + [FCF] * N)
    except Exception:
        irr_value = np.nan # Kh√¥ng th·ªÉ t√≠nh n·∫øu d√≤ng ti·ªÅn kh√¥ng ƒë·ªïi d·∫•u

    # C. PP (Payback Period - Th·ªùi gian ho√†n v·ªën)
    # C√¥ng th·ª©c: PP = NƒÉm tr∆∞·ªõc khi ho√†n v·ªën + (V·ªën c√≤n l·∫°i ch∆∞a thu h·ªìi / FCF nƒÉm ho√†n v·ªën)
    pp_value = I0 / FCF if FCF > 0 else float('inf')
    
    # D. DPP (Discounted Payback Period - Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    pv_cash_flows = [cash_flows[0]] 
    for t_idx in range(1, N + 1):
        pv_cash_flows.append(FCF / (1 + r)**t_idx)

    cumulative_pv = np.cumsum(pv_cash_flows)
    
    dpp_value = float('inf')
    
    # T√¨m nƒÉm ho√†n v·ªën (nƒÉm m√† cumulative_pv chuy·ªÉn sang d∆∞∆°ng)
    try:
        if cumulative_pv.max() > 0:
            payback_year = np.where(cumulative_pv >= 0)[0][0]
            if payback_year == 0:
                 dpp_value = 0
            else:
                # Gi√° tr·ªã t√≠ch l≈©y PV cu·ªëi nƒÉm tr∆∞·ªõc khi ho√†n v·ªën (l√† s·ªë √¢m)
                prev_cumulative_pv = cumulative_pv[payback_year - 1]
                # Gi√° tr·ªã PV d√≤ng ti·ªÅn nƒÉm ho√†n v·ªën
                pv_current_year = pv_cash_flows[payback_year]
                
                # DPP = NƒÉm tr∆∞·ªõc + (Gi√° tr·ªã tuy·ªát ƒë·ªëi v·ªën c√≤n l·∫°i / PV d√≤ng ti·ªÅn nƒÉm ho√†n v·ªën)
                dpp_value = (payback_year - 1) + (abs(prev_cumulative_pv) / pv_current_year)
        elif cumulative_pv.max() < 0:
            dpp_value = float('inf') # Kh√¥ng bao gi·ªù ho√†n v·ªën
    except:
        dpp_value = float('inf')


    metrics = {
        'NPV': npv_value,
        'IRR': irr_value,
        'PP': pp_value,
        'DPP': dpp_value
    }

    return df_cf.iloc[1:], metrics

# --- 4. H√ÄM PH√ÇN T√çCH CH·ªà S·ªê B·∫∞NG GEMINI ---
def get_ai_financial_analysis(metrics_data, api_key):
    """Y√™u c·∫ßu AI ph√¢n t√≠ch c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n."""
    if not api_key:
        return "L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'."

    npv = metrics_data['NPV']
    irr = metrics_data['IRR']
    pp = metrics_data['PP']
    dpp = metrics_data['DPP']
    
    # X·ª≠ l√Ω gi√° tr·ªã IRR v√¥ h·∫°n ho·∫∑c kh√¥ng x√°c ƒë·ªãnh
    irr_display = f"{irr*100:.2f}%" if not np.isnan(irr) and irr != float('inf') and irr != float('-inf') else "Kh√¥ng x√°c ƒë·ªãnh/Kh√¥ng th·ªÉ t√≠nh"
    
    # X·ª≠ l√Ω gi√° tr·ªã ho√†n v·ªën v√¥ h·∫°n
    pp_display = f"{pp:.2f} nƒÉm" if pp != float('inf') else "Kh√¥ng ho√†n v·ªën trong v√≤ng ƒë·ªùi d·ª± √°n"
    dpp_display = f"{dpp:.2f} nƒÉm" if dpp != float('inf') else "Kh√¥ng ho√†n v·ªën c√≥ chi·∫øt kh·∫•u trong v√≤ng ƒë·ªùi d·ª± √°n"


    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh ƒë·∫ßu t∆∞ c√≥ kinh nghi·ªám. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t kh√°ch quan, ng·∫Øn g·ªçn (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ t√≠nh kh·∫£ thi c·ªßa d·ª± √°n. 

    Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n:
    1. NPV (Gi√° tr·ªã Hi·ªán t·∫°i Thu·∫ßn): {npv:,.0f} VND
    2. IRR (T·ª∑ su·∫•t Sinh l·ªùi N·ªôi t·∫°i): {irr_display}
    3. PP (Th·ªùi gian Ho√†n v·ªën): {pp_display}
    4. DPP (Th·ªùi gian Ho√†n v·ªën c√≥ Chi·∫øt kh·∫•u): {dpp_display}

    Ph√¢n t√≠ch t·∫≠p trung v√†o vi·ªác d·ª± √°n c√≥ n√™n ƒë∆∞·ª£c ch·∫•p nh·∫≠n hay kh√¥ng, d·ª±a tr√™n quy t·∫Øc: NPV > 0 v√† so s√°nh IRR v·ªõi WACC (ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√≠nh to√°n NPV).
    """

    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text
    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# ==============================================================================
# --- LOGIC GIAO DI·ªÜN STREAMLIT ---
# ==============================================================================

st.info("üí° **L∆ØU √ù:** ƒê·ªÉ AI tr√≠ch xu·∫•t d·ªØ li·ªáu ch√≠nh x√°c nh·∫•t, vui l√≤ng t·∫£i l√™n file **Markdown (.md)** ho·∫∑c **Text (.txt)** ch·ª©a c√°c th√¥ng s·ªë: V·ªën ƒë·∫ßu t∆∞, V√≤ng ƒë·ªùi, Doanh thu, Chi ph√≠, WACC, Thu·∫ø.")

# --- 1. T·∫£i File ---
uploaded_file = st.file_uploader(
    "1. T·∫£i l√™n file Ph∆∞∆°ng √°n Kinh doanh (.txt, .md, ho·∫∑c .docx)",
    type=['txt', 'md', 'docx']
)

if uploaded_file is not None:
    # ƒê·ªçc n·ªôi dung file
    try:
        file_details = {"FileName": uploaded_file.name, "FileType": uploaded_file.type}
        
        # N·∫øu l√† file DOCX, ta ch·ªâ ƒë·ªçc n·ªôi dung th√¥ (c√≥ th·ªÉ kh√¥ng ho√†n h·∫£o)
        if uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
             st.warning("ƒê√£ t·∫£i file DOCX. Qu√° tr√¨nh tr√≠ch xu·∫•t c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c do c·∫•u tr√∫c ph·ª©c t·∫°p. Vui l√≤ng ki·ªÉm tra k·ªπ k·∫øt qu·∫£.")
             # Th·ª≠ ƒë·ªçc n·ªôi dung th√¥ c·ªßa file ƒë·ªÉ AI x·ª≠ l√Ω
             doc_content = uploaded_file.getvalue().decode("utf-8", errors='ignore')
        else:
            # ƒê·ªçc file Text/Markdown
            doc_content = uploaded_file.getvalue().decode("utf-8")
        
        st.subheader("N·ªôi dung File ƒë√£ t·∫£i l√™n (Tham chi·∫øu)")
        with st.expander("Xem n·ªôi dung file"):
             st.text(doc_content[:3000] + "..." if len(doc_content) > 3000 else doc_content)

        # --- L·ªçc d·ªØ li·ªáu b·∫±ng AI ---
        st.markdown("---")
        if st.button("2. ü§ñ Tr√≠ch xu·∫•t Th√¥ng s·ªë T√†i ch√≠nh (AI)", type="primary"):
            if not API_KEY:
                st.error("Vui l√≤ng c·∫•u h√¨nh Kh√≥a API 'GEMINI_API_KEY' trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")
            else:
                with st.spinner("ƒêang g·ª≠i n·ªôi dung file t·ªõi Gemini ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu..."):
                    params, error = extract_financial_data(doc_content, API_KEY)
                
                if error:
                    st.error(error)
                    st.session_state['extracted_params'] = None
                elif params:
                    st.session_state['extracted_params'] = params
                    st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")

    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file: {e}. ƒê·∫£m b·∫£o file kh√¥ng b·ªã l·ªói ƒë·ªãnh d·∫°ng.")
        st.session_state['extracted_params'] = None

# --- 3. Hi·ªÉn th·ªã th√¥ng s·ªë ƒë√£ tr√≠ch xu·∫•t ---
if 'extracted_params' in st.session_state and st.session_state['extracted_params'] is not None:
    params = st.session_state['extracted_params']
    
    st.subheader("3. Th√¥ng s·ªë D·ª± √°n ƒë√£ tr√≠ch xu·∫•t")
    
    # Hi·ªÉn th·ªã tham s·ªë
    col_i0, col_n, col_r = st.columns(3)
    col_c, col_wacc, col_tax = st.columns(3)

    col_i0.metric("V·ªën ƒë·∫ßu t∆∞ ($I_0$)", f"{params['initial_investment']:,.0f} VND")
    col_n.metric("V√≤ng ƒë·ªùi D·ª± √°n ($N$)", f"{params['project_life']} nƒÉm")
    col_r.metric("Doanh thu ($R$)", f"{params['annual_revenue']:,.0f} VND")
    col_c.metric("Chi ph√≠ ($C$)", f"{params['annual_cost']:,.0f} VND")
    col_wacc.metric("WACC ($r$)", f"{params['wacc']*100:.2f}%")
    col_tax.metric("Thu·∫ø su·∫•t ($t$)", f"{params['tax_rate']*100:.2f}%")
    
    # --- 4. X√¢y d·ª±ng D√≤ng ti·ªÅn & T√≠nh to√°n Ch·ªâ s·ªë ---
    
    # K√≠ch ho·∫°t t√≠nh to√°n
    try:
        df_cf, metrics = calculate_metrics(params)
        st.session_state['cash_flow_table'] = df_cf
        st.session_state['financial_metrics'] = metrics
        
        st.markdown("---")
        st.subheader("4. B·∫£ng D√≤ng ti·ªÅn (Cash Flow) H√†ng nƒÉm")
        st.dataframe(
            df_cf, 
            hide_index=True,
            use_container_width=True
        )
        
        # Hi·ªÉn th·ªã Ch·ªâ s·ªë Hi·ªáu qu·∫£
        st.markdown("---")
        st.subheader("5. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
        
        col_npv, col_irr, col_pp, col_dpp = st.columns(4)

        # NPV
        npv_color = "green" if metrics['NPV'] > 0 else "red"
        col_npv.markdown(f"<p style='text-align: center; font-size: 16px; color: {npv_color};'>**NPV**</p>", unsafe_allow_html=True)
        col_npv.metric("", f"{metrics['NPV']:,.0f}", delta_color=npv_color, help="NPV > 0: Ch·∫•p nh·∫≠n d·ª± √°n. NPV < 0: T·ª´ ch·ªëi d·ª± √°n.")
        col_npv.markdown(f"<p style='text-align: center; color: {npv_color}; font-size: 10px;'>VND</p>", unsafe_allow_html=True)
        
        # IRR
        irr_display = f"{metrics['IRR']*100:.2f}%" if not np.isnan(metrics['IRR']) and metrics['IRR'] != float('inf') else "N/A"
        irr_color = "green" if not np.isnan(metrics['IRR']) and metrics['IRR'] > params['wacc'] else "red"
        col_irr.markdown(f"<p style='text-align: center; font-size: 16px; color: {irr_color};'>**IRR**</p>", unsafe_allow_html=True)
        col_irr.metric("", irr_display, delta_color="off", help="IRR > WACC: Ch·∫•p nh·∫≠n d·ª± √°n.")
        
        # PP
        pp_display = f"{metrics['PP']:.2f}" if metrics['PP'] != float('inf') else "> N"
        pp_color = "green" if metrics['PP'] <= params['project_life'] else "red"
        col_pp.markdown(f"<p style='text-align: center; font-size: 16px; color: {pp_color};'>**PP (Ho√†n v·ªën)**</p>", unsafe_allow_html=True)
        col_pp.metric("", f"{pp_display} nƒÉm", delta_color="off", help="PP < N: D·ª± √°n ho√†n v·ªën trong v√≤ng ƒë·ªùi.")
        
        # DPP
        dpp_display = f"{metrics['DPP']:.2f}" if metrics['DPP'] != float('inf') else "> N"
        dpp_color = "green" if metrics['DPP'] <= params['project_life'] else "red"
        col_dpp.markdown(f"<p style='text-align: center; font-size: 16px; color: {dpp_color};'>**DPP (Ho√†n v·ªën CK)**</p>", unsafe_allow_html=True)
        col_dpp.metric("", f"{dpp_display} nƒÉm", delta_color="off", help="DPP < N: D·ª± √°n ho√†n v·ªën c√≥ chi·∫øt kh·∫•u trong v√≤ng ƒë·ªùi.")


        # --- 5. Y√™u c·∫ßu AI Ph√¢n t√≠ch ---
        st.markdown("---")
        if st.button("6. Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n"):
             if not API_KEY:
                st.error("Vui l√≤ng c·∫•u h√¨nh Kh√≥a API 'GEMINI_API_KEY' trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")
             else:
                with st.spinner('ƒêang g·ª≠i c√°c ch·ªâ s·ªë t·ªõi Gemini ƒë·ªÉ ph√¢n t√≠ch...'):
                    ai_result = get_ai_financial_analysis(metrics, API_KEY)
                
                st.markdown("#### ü§ñ K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:")
                st.info(ai_result)

    except ZeroDivisionError:
        st.error("L·ªói Chia cho 0: D√≤ng ti·ªÅn thu·∫ßn (FCF) h√†ng nƒÉm b·∫±ng 0. Kh√¥ng th·ªÉ t√≠nh PP v√† DPP.")
    except Exception as e:
        st.error(f"L·ªói t√≠nh to√°n: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c th√¥ng s·ªë tr√≠ch xu·∫•t.")
